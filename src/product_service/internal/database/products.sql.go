// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: products.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, created_at, modified_at, creator_id, name, price, description) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, modified_at, creator_id, name, price, description
`

type CreateProductParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	ModifiedAt  time.Time
	CreatorID   uuid.UUID
	Name        string
	Price       int32
	Description string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.CreatorID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.CreatorID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id=$1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT id, created_at, modified_at, creator_id, name, price, description FROM products WHERE id=$1 FOR UPDATE NOWAIT
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.CreatorID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, price, description FROM products LIMIT $1 OFFSET $2
`

type GetProductsParams struct {
	Limit  int32
	Offset int32
}

type GetProductsRow struct {
	ID          uuid.UUID
	Name        string
	Price       int32
	Description string
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductDetails = `-- name: UpdateProductDetails :one
UPDATE products SET modified_at=$1, name=$2, price=$3, description=$4
WHERE id=$5
RETURNING id, created_at, modified_at, creator_id, name, price, description
`

type UpdateProductDetailsParams struct {
	ModifiedAt  time.Time
	Name        string
	Price       int32
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateProductDetails(ctx context.Context, arg UpdateProductDetailsParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductDetails,
		arg.ModifiedAt,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.CreatorID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}
