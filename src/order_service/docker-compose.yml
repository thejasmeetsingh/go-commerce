version: "3.8"
services:
  orders-db:
    container_name: orders_db
    restart: always
    image: postgres:16.1-alpine3.18
    volumes:
      - orders-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=$DB_NAME
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $DB_NAME -U $DB_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal
  
  redis-db:
    container_name: orders_cache
    restart: always
    image: redis:7.2.3-alpine
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  order-monitoring:
    container_name: order_monitoring
    image: prom/prometheus
    ports:
      - $PROM_PORT:9090
    volumes:
      - .:/etc/prometheus
    command: "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - internal

  order-service-analytics:
    container_name: order_service_analytics
    image: grafana/grafana:latest
    ports:
      - $GRAFANA_PORT:3000
    environment:
      - GF_SECURITY_ADMIN_USER=$GF_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD=$GF_ADMIN_PASSWORD
    depends_on:
      - order-monitoring
    networks:
      - internal

  order-service:
    build: .
    restart: on-failure
    container_name: order_service
    command: sh -c "goose -dir ./sql/schema/ postgres $DB_URL up && go install && order_service"
    volumes:
      - .:/go/src/app
    ports:
      - $PORT:$PORT
    depends_on:
      orders-db:
        condition: service_healthy
      redis-db:
        condition: service_healthy
    env_file: .env
    networks:
      - internal
      - shared-network

volumes:
  orders-db:

networks:
  internal:
    driver: bridge
  shared-network:
    external: true
